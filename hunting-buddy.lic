=begin
  Documentation: https://elanthipedia.play.net/Lich_script_repository#hunting-buddy
=end

custom_require.call(%w[common common-arcana common-items common-travel drinfomon equipmanager events spellmonitor])

class HuntingBuddy

  def initialize
    arg_definitions = [[]]
    args = parse_args(arg_definitions, true)

    @settings = get_settings

    @town_data = get_data('town')[@settings.hometown]
    @hunting_data = get_data('hunting')
    @escort_zones = @hunting_data.escort_zones
    @hunting_zones = @hunting_data.hunting_zones

    @stop_on_familiar_drag = @settings.stop_on_familiar_drag
    echo("  @stop_on_familiar_drag: #{@stop_on_familiar_drag}") if $debug_mode_hunting

    @stop_on_low_threshold = @settings.stop_on_low_threshold
    echo("  @stop_on_low_threshold: #{@stop_on_low_threshold}") if $debug_mode_hunting

    @stop_on_high_threshold = @settings.stop_on_high_threshold
    echo("  @stop_on_high_threshold: #{@stop_on_high_threshold}") if $debug_mode_hunting

    @skillset_exp_thresholds = {
      'Armor' => @settings.armor_exp_training_max_threshold,
      'Weapon' => @settings.weapon_exp_training_max_threshold,
      'Magic' => @settings.magic_exp_training_max_threshold,
      'Survival' => @settings.survival_exp_training_max_threshold,
      'Lore' => @settings.lore_exp_training_max_threshold
    }
    echo("  @skillset_exp_thresholds: #{@skillset_exp_thresholds}") if $debug_mode_hunting

    @hunting_buddies_max = @settings.hunting_buddies_max
    echo("  @hunting_buddies_max: #{@hunting_buddies_max}") if $debug_mode_hunting

    # Will deprecate prehunt_buffs tag as a room
    @prehunt_buffing_room = @settings.prehunt_buffing_room || @settings.prehunt_buffs
    echo("  @prehunt_buffing_room: #{@prehunt_buffing_room}") if $debug_mode_hunting

    hunting_info = []
    if @settings.hunting_file_list || args.flex.any?
      (args.flex.any? ? args.flex : @settings.hunting_file_list).each do |file|
        if file == 'setup'
          hunting_info += get_settings.hunting_info
        else
          # Hunting info from extra config needs the config name passed on in args.
          infos = get_settings([file]).hunting_info
          infos.each do |info|
            info['args'] = info['args'] || []
            (info['args'] << file) unless info['args'].include? file
          end
          hunting_info += infos
        end
      end
    else
      hunting_info = @settings.hunting_info
    end

    @hunting_info = format_hunting_info(hunting_info)
  end

  def need_boxes?
    return false unless @settings.box_hunt_minimum
    DRCI.count_all_boxes(@settings) <= @settings.box_hunt_minimum
  end

  def main
    check_bundling_rope
    DRC.wait_for_script_to_complete('restock') unless @settings.sell_loot_skip_bank

    @hunting_info.each_with_index do |info, index|

      args = info['args'] # list of args to pass to combat-trainer
      before_actions = info['before'] # list of script names
      after_actions = info['after'] # list of script names
      during_actions = info['during'] # list of script names
      duration = info[:duration] # number of minutes to hunt
      stop_on_high_skills = info['stop_on'] # list of skill names
      stop_on_low_skills = info['stop_on_low'] # list of skill names
      stop_on_boxes = info['boxes'] || info['stop_on_boxes'] # boolean
      stop_on_no_moons = info['moons'] || info['stop_on_moons'] # boolean
      hunting_zones = [info[:zone]].flatten.compact # string or list of hunting zones
      waiting_room = info['full_waiting_room'] || @settings.safe_room # room id

      if $debug_mode_hunting
        echo("Processing hunting info number #{index + 1}")
        echo("  args: #{args}")
        echo("  before_actions: #{before_actions}")
        echo("  after_actions: #{after_actions}")
        echo("  during_actions: #{during_actions}")
        echo("  duration: #{duration}")
        echo("  stop_on_high_skills: #{stop_on_high_skills}")
        echo("  stop_on_low_skills: #{stop_on_low_skills}")
        echo("  stop_on_boxes: #{stop_on_boxes}")
        echo("  stop_on_no_moons: #{stop_on_no_moons}")
        echo("  hunting_zones: #{hunting_zones}")
        echo("  waiting_room: #{waiting_room}")
      end

      if @stop_hunting
        DRC.message("***STATUS*** Stopping all hunting because manual intervention")
        stop_actions(during_actions)
        execute_actions(after_actions)
        break
      end

      if @stopped_for_bleeding
        DRC.message("***STATUS*** Stopping all hunting because bleeding")
        DRC.retreat
        stop_script('tendme') if Script.running?('tendme')
        stop_actions(during_actions)
        execute_actions(after_actions)
        break
      end

      if stop_on_boxes && !need_boxes?
        DRC.message("***STATUS*** Skipping hunt because have enough boxes")
        # This purposefully does not perform any actions as an efficiency
        # to move into the next hunt as quickly as possible.
        next
      end

      # Execute scripts to run before the hunt
      execute_actions(before_actions)

      if stop_on_no_moons && !DRCMM.moons_visible?
        DRC.message("***STATUS*** Skipping hunt because no moons")
        stop_actions(during_actions)
        execute_actions(after_actions)
          next
        end

      if should_stop_for_high_skills?(stop_on_high_skills)
        DRC.message("***STATUS*** Skipping hunt because skills reached learning threshold: #{stop_on_high_skills}")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      if should_stop_for_low_skills?(stop_on_low_skills)
        DRC.message("***STATUS*** Skipping hunt because skills dropped below learning threshold: #{stop_on_low_skills}")
        stop_actions(during_actions)
        execute_actions(after_actions)
        next
      end

      check_prehunt_buffs

      next unless find_hunting_room?(hunting_zones, waiting_room)

      args.each_with_index do |arg, index|
        if @stopped_for_bleeding
          DRC.message("***STATUS*** Stopping all hunting because bleeding")
          DRC.retreat
          stop_script('tendme') if Script.running?('tendme')
          break
        end

        # Execute background scripts to run during the hunt
        execute_nonblocking_actions(during_actions)

        hunt(
          arg,
          duration ? duration[index] : nil,
          stop_on_high_skills ? stop_on_high_skills[index] : nil,
          stop_on_low_skills ? stop_on_low_skills[index] : nil,
          stop_on_boxes ? stop_on_boxes[index] : nil,
          stop_on_no_moons ? stop_on_no_moons[index] : nil
        )
      end

      # Stop background scripts that ran during the hunt
      stop_actions(during_actions)

      DRCI.stow_hand('left') unless !DRC.right_hand || !DRC.left_hand
      while DRC.bput('stow feet', /You pick up/, /Stow what/) =~ /You pick up/
      end

      DRC.wait_for_script_to_complete('bescort', @exit) if @exit
      DRCA.release_cyclics(@settings.cyclic_no_release)

      # Execute scripts to run after the hunt
      execute_actions(after_actions)
    end

    DRC.message("***STATUS*** Returning to safe room: #{@settings.safe_room}")
    DRCT.walk_to(@settings.safe_room)
    EquipmentManager.new(@settings).wear_equipment_set?('standard')
  end

  def execute_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** EXECUTE #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      DRC.wait_for_script_to_complete(script_name, script_args)
    end
  end

  def execute_nonblocking_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** EXECUTE #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      start_script(script_name, script_args)
    end
  end

  def stop_actions(actions)
    actions.each do |action|
      DRC.message("***STATUS*** STOP #{action}")
      script_args = action.split(' ')
      script_name = script_args.shift
      stop_script(script_name) if Script.running?(script_name)
    end
  end

  def check_bundling_rope
    return unless @settings.skinning['skin']
    return if DRCI.wearing?('bundle')
    return if DRCI.exists?('bundling rope')

    tanner_room = @town_data['tannery']['id'],
    tanner_name = @town_data['tannery']['name'],

    DRCT.walk_to(tanner_room)
    DRC.bput("ask #{tanner_name} for bundling rope", 'hands you')
    DRC.stow_item?('bundling rope')
  end

  def check_prehunt_buffs
    return unless @settings.waggle_sets['prehunt_buffs']

    DRCT.walk_to(@prehunt_buffing_room)

    DRC.wait_for_script_to_complete('buff', ['prehunt_buffs'])
  end

  def find_hunting_room?(zone_name, waiting_room)
    UserVars.friends = @settings.hunting_buddies || []
    UserVars.hunting_nemesis = @settings.hunting_nemesis || []
    zones = Array(zone_name).flatten.compact
    rooms = @hunting_zones.values_at(*zones.select { |name| @hunting_zones.include?(name) }).flatten.compact unless @escort_zones.include?(zones.first)
    if rooms.empty? || rooms.nil?
      escort_info = @escort_zones[zones.first]
      unless escort_info
        DRC.message("FAILED TO FIND THE HUNTING ZONE(S) #{zones} IN BASE.YAML")
        return false
      end
      DRCT.walk_to(escort_info['base'])
      DRC.wait_for_script_to_complete('bescort', [escort_info['area'], escort_info['enter']])
      @exit = [escort_info['area'], 'exit']
    else
      @exit = nil
      return DRCT.find_empty_room(rooms, waiting_room,
        lambda do |search_attempt|
          # Skip room if has more people than your max limit
          return false if DRRoom.pcs.size > @hunting_buddies_max
          # Skip if one of your nemesis is in the room
          return false if (DRRoom.pcs & UserVars.hunting_nemesis).any?
          # Continue if one of your friends is in the room
          return true if (DRRoom.pcs & UserVars.friends).any?
          # Skip if anyone not in your group is in the room
          return false if (DRRoom.pcs - DRRoom.group_members).any?
          # No visible friends in the room and no visible people
          UserVars.friends.each { |friend| Flags.add("hunting-buddy-room-check-#{friend}", friend) }
          Flags.add('hunting-buddy-room-check', 'says, ', 'say, ', 'You hear', 'Someone snipes a')
          case DRC.bput('search', 'roundtime', "You're not in any condition to be searching around")
          when /roundtime/i
            data = reget(40).reverse.take_while { |x| x !~ /You search around/ }
            if data.grep(/vague silhouette|You notice \w+, who is|see signs that/).any?
              pause
              waitrt?
                return UserVars.friends.find { |friend| Flags["hunting-buddy-room-check-#{friend}"] }
            end
            fput("say #{@settings.empty_hunting_room_messages.sample}") unless @settings.empty_hunting_room_messages.empty?
            20.times do |_|
              pause 0.5
              return true if UserVars.friends.find { |friend| Flags["hunting-buddy-room-check-#{friend}"] }
              return false if Flags['hunting-buddy-room-check'] || !(DRRoom.pcs - DRRoom.group_members - UserVars.friends).empty?
            end
            true
          when /You're not in any condition to be searching around/i
            DRC.message("***STATUS*** You're too injured to hunt!")
            @stop_hunting = true
            @stopped_for_bleeding = bleeding?
            # Ironically, return true so the search for a suitable hunting room
            # stops and then the hunting buddy loop will detect that you need help
            # sooner rather than later.
            true
          end
        end,
        @settings.hunting_room_min_mana,
        @settings.hunting_room_strict_mana,
        @settings.hunting_room_max_searches
      )
    end

    true
  end

  # ------------------------------------------------------------

  # Identify if every skill in the given list has a learning rate
  # at or above the desired threshold for their skillset.
  def should_stop_for_high_skills?(stop_on_high_skills = [])
    stop_on_high_skills && !stop_on_high_skills.empty? && stop_on_high_skills.flatten.all? do |skill|
      DRSkill.getxp(skill) >= get_skill_exp_high_threshold(skill)
    end
  end

  # Identify if at least one skill in the given list has a learning rate
  # at or below the desired threshold for their skillset.
  def should_stop_for_low_skills?(stop_on_low_skills = [])
    stop_on_low_skills && !stop_on_low_skills.empty? && stop_on_low_skills.flatten.any? do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_low_threshold(skill)
    end
  end

  # ------------------------------------------------------------

  # Identify the skills in the given list
  # that have not yet met their learning rate thresholds
  # and so we should continue hunting.
  def get_skills_below_high_threshold(stop_on_high_skills = [])
    stop_on_high_skills.flatten.select do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_high_threshold(skill)
    end
  end

  # Identify the skills in the given list
  # that have fallen below their learning rate thresholds
  # and so we should stop hunting to go work on them.
  # Usually, these are non-combat skills like locksmithing or crafting.
  def get_skills_below_low_threshold(stop_on_low_skills = [])
    stop_on_low_skills.flatten.select do |skill|
      DRSkill.getxp(skill) <= get_skill_exp_low_threshold(skill)
    end
  end

  # ------------------------------------------------------------

  # What is the learning rate high threshold at which point we should stop hunting?
  def get_skill_exp_high_threshold(skill)
    get_skillset_exp_high_threshold(DRSkill.getskillset(skill))
  end

  # What is the learning rate high threshold at which point we should stop hunting?
  def get_skillset_exp_high_threshold(skillset)
    @skillset_exp_thresholds[skillset] || @stop_on_high_threshold
  end

  # ------------------------------------------------------------

  # What is the learning rate low threshold at which point we should stop hunting?
  def get_skill_exp_low_threshold(skill)
    get_skillset_exp_low_threshold(DRSkill.getskillset(skill))
  end

  # What is the learning rate low threshold at which point we should stop hunting?
  def get_skillset_exp_low_threshold(skillset)
    @stop_on_low_threshold
  end

  # ------------------------------------------------------------

  def over_box_limit?
    $COMBAT_TRAINER.get_process('loot').at_box_limit?
  end

  # ------------------------------------------------------------

  def hunt(args, duration, stop_on_high_skills, stop_on_low_skills, stop_on_boxes, stop_on_no_moons)
    $COMBAT_TRAINER = nil
    hunting_room = Room.current.id
    Flags.add('hunting-buddy-familiar-drag', /^Your .+ grabs ahold of you and drags you .+, out of combat.+$/)

    DRC.message("***STATUS*** Beginning hunt '#{args}' for '#{duration}' minutes")

    verify_script('combat-trainer')
    start_script('combat-trainer', args)

    # This pause "fixes" a race condition with combat starting and the monitors below trying to kill
    # it before it can get the 'stop' comand.
    # A better solution would be a smarter utility "wait_for_script_to_start" or some call into
    # combat i.e. `pause 0.5 until $COMBAT_TRAINER.is_ready` or something.
    pause 2

    counter = 0
    loop do
      clear
      if health < @settings.health_threshold
        DRC.message("***STATUS*** Exiting because low health: #{health} < #{@settings.health_threshold}")
        fput('avoid all')
        fput('exit')
      end
      if @settings.stop_hunting_if_bleeding && bleeding?
        DRC.message("***STATUS*** Stopping because bleeding")
        @stopped_for_bleeding = true
        break
      end
      if stop_on_boxes && over_box_limit?
        DRC.message("***STATUS*** Stopping hunt because have enough boxes")
        break
      end
      if stop_on_no_moons && !DRCMM.moons_visible?
        DRC.message("***STATUS*** Stopping because no moons")
        break
      end
      if should_stop_for_high_skills?(stop_on_high_skills)
        DRC.message("***STATUS*** Stopping because skills reached learning threshold: #{stop_on_high_skills}")
        break
      end
      if should_stop_for_low_skills?(stop_on_low_skills)
        DRC.message("***STATUS*** Stopping because skills dropped below learning threshold: #{stop_on_low_skills}")
        break
      end
      if @stop_hunting || @next_hunt
        DRC.message("***STATUS*** Stopping because manual intervention")
        @next_hunt = false
        break
      end
      if duration && (counter / 60) >= duration
        DRC.message("***STATUS*** Stopping because time")
        break
      end
      if Flags['hunting-buddy-familiar-drag'] && @stop_on_familiar_drag
        DRC.message("***STATUS*** Stopping because familiar drug while stunned")
        Flags.reset('hunting-buddy-familiar-drag')
        break
      end
      if Flags['hunting-buddy-familiar-drag'] && !@stop_on_familiar_drag
        DRC.message("***STATUS*** Heading back to room because familiar drug while stunned")
        pause_script('combat-trainer') if Script.running?('combat-trainer')
        DRCT.walk_to(hunting_room)
        unpause_script('combat-trainer') if Script.running?('combat-trainer')
        Flags.reset('hunting-buddy-familiar-drag')
      end
      if (counter % 60).zero?
        if duration
          if stop_on_high_skills
            DRC.message("***STATUS*** #{duration - (counter / 60)} minutes of hunting remaining or waiting on #{get_skills_below_high_threshold(stop_on_high_skills).join(', ')}")
          else
            DRC.message("***STATUS*** #{duration - (counter / 60)} minutes of hunting remaining")
          end
        else
          if stop_on_high_skills
            DRC.message("***STATUS*** #{counter / 60} minutes of hunting, still waiting on #{get_skills_below_high_threshold(stop_on_high_skills).join(', ')}")
          else
            DRC.message("***STATUS*** #{counter / 60} minutes of hunting")
          end
        end
      end
      counter += 1
      pause 1
    end
    $COMBAT_TRAINER.stop
    pause 1 while $COMBAT_TRAINER.running || Script.running?('combat-trainer')
    DRC.retreat
  end

  def format_hunting_info(hunting_info_raw)
    hunting_info = []
    hunting_info_raw.each do |info|
      if hunting_info.empty? || hunting_info.last[:zone] != info[:zone]
        if info['args'].flatten == info['args']
          info['args'] = [info['args'] || []]
          info[:duration] = [info[:duration]]
          info['stop_on'] = [info['stop_on']]
          info['stop_on_low'] = [info['stop_on_low']] if info['stop_on_low']
          info['before'] = info['before']
          info['after'] = info['after']
          info['during'] = info['during']
          info['boxes'] = info['boxes']
        end
        hunting_info << info
      else
        hunting_info.last['args'] << info['args']
        hunting_info.last[:duration] << info[:duration]
        hunting_info.last['stop_on'] << info['stop_on']
        hunting_info.last['stop_on_low'] << info['stop_on_low']
        hunting_info.last['before'] ||= info['before']
        hunting_info.last['after'] ||= info['after']
        hunting_info.last['during'] ||= info['during']
        hunting_info.last['boxes'] ||= info['boxes']
      end
    end
    hunting_info
  end

  def stop_hunting
    @stop_hunting = true
  end

  def next_hunt
    @next_hunt = true
  end
end

before_dying do
  ['combat-trainer'].each do |script_name|
    stop_script(script_name) if Script.running?(script_name)
  end
  DRCA.release_cyclics(get_settings.cyclic_no_release)
  Flags.flags.keys
    .select { |flag_name| flag_name.start_with?('hunting-buddy-') }
    .each   { |flag_name| Flags.delete(flag_name) }
end

$HUNTING_BUDDY = HuntingBuddy.new
$HUNTING_BUDDY.main
